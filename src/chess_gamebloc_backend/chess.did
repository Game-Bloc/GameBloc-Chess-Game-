type AppMessage = record { "text" : text; timestamp : nat64 };
type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : blob;
  tree : blob;
  is_end_of_queue : bool;
};
type CanisterOutputMessage = record {
  key : text;
  content : blob;
  client_key : ClientKey;
};
type CanisterWsCloseArguments = record { client_key : ClientKey };
type CanisterWsGetMessagesArguments = record { nonce : nat64 };
type CanisterWsMessageArguments = record { msg : WebsocketMessage };
type CanisterWsOpenArguments = record {
  gateway_principal : principal;
  client_nonce : nat64;
};
type ClientKey = record { client_principal : principal; client_nonce : nat64 };
type ManualReply = record {
  age : nat8;
  "principal" : text;
  name : text;
  count : nat8;
  description : text;
};
type Profile = record {
  age : nat8;
  "principal" : text;
  name : text;
  count : nat8;
  description : text;
};
type PublicKeyReply = record { public_key_hex : text };
type Result = variant { Ok : PublicKeyReply; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : CanisterOutputCertifiedMessages; Err : text };
type WebsocketMessage = record {
  sequence_num : nat64;
  content : blob;
  client_key : ClientKey;
  timestamp : nat64;
  is_service_message : bool;
};
service : () -> {
  aiMove : (text) -> ();
  get : (text) -> (ManualReply) query;
  getFen : (text) -> (opt text) query;
  getPlayerProfile : () -> (ManualReply) query;
  get_player : (text) -> (opt Profile) query;
  inc : () -> ();
  move : (text, text) -> (bool);
  new : (text, bool) -> ();
  public_key : () -> (Result);
  read : () -> (nat) query;
  search : (text) -> (opt Profile) query;
  update_player_profile : (nat8, text, text, nat8, text) -> (Profile);
  whoami : () -> (principal) query;
  write : (nat) -> ();
  ws_close : (CanisterWsCloseArguments) -> (Result_1);
  ws_get_messages : (CanisterWsGetMessagesArguments) -> (Result_2) query;
  ws_message : (CanisterWsMessageArguments, opt AppMessage) -> (Result_1);
  ws_open : (CanisterWsOpenArguments) -> (Result_1);
}
